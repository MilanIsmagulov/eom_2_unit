const_data находится в другом файле
const_data = {
    "index_1":{
        "subtitle": "subtitle 3333",
        "step_of_popup": "step 2",
        "test":[
            {"type": 3},
            {"image": true, "image_path": "./content/test_image.png"},
            {"answers": [
                "First Answer",
                "Second Answer",
                "Third dfgdfgdg Answer",
                "Thirdwqwqw Answer",
                "Thirdhgghghh Answer",
                "Four Answer"
            ]}
        ],
    },
    "index_2":{
        "subtitle": "subtitle 3333",
        "step_of_popup": "step 2",
        "test":[
            {"type": 3},
            {"image": true, "image_path": "./content/test_image.png"},
            {"answers": [
                "Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae dolores consequatur temporibus pariatur voluptatem eius ea asperiores?",
                "First Answer",
                "Second Answer",
                "Third Answer",
                "Four Answer"
            ]}
        ],
    },
}

Нужно добавить возможность включать изображения теста при наличии этой строки {"image": true, "image_path": "./content/test_image.png"}, или "image": true если "image": false или это строка {"image": true, "image_path": "./content/test_image.png"} отсутствует в этот скрипт:

// Access answers array from the data object
document.getElementById('control_button_3').style.display = 'none';
document.getElementById('control_button_2').style.display = 'inline-block';

var anwserArr = data[`index_${currentPageIndex}`].test.find(item => item.answers).answers;
answerButton.classList.remove('gray_dis');
answerButton.disabled = false;
restartButton.classList.add('hidden');
restartButton.disabled = false;
var dynamicContainer = document.createElement('div');
dynamicContainer.className = 'dynamic-content';
var dragObj = document.createElement('div');
dragObj.className = 'numbers';
contentDiv.appendChild(dynamicContainer);
dynamicContainer.appendChild(dragObj);
localStorage.removeItem('data_for_list');

var list = document.createElement('ul');
list.className = 'list';
list.id = 'list';
dynamicContainer.appendChild(list);

var storeItems = [];
var listItems = [];
var dragStartIndex;

init();

function init() {
    localStorage.getItem('data_for_list') ? loadList() : createList();
}

function createList() {
    [...anwserArr]
    .map(a => ({ value: a, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(a => a.value)
    .forEach((item, index) => {
        const listItem = document.createElement('li');
        listItem.draggable = true;
        listItem.setAttribute('id', index);
        listItem.innerHTML = `<div class="item" draggable="true">${item}</div>`;

        var num = document.createElement('span');
        num.setAttribute('class', 'number');
        num.innerHTML = `${index+1}`;
        document.getElementsByClassName("numbers")[0].appendChild(num);

        listItems.push(listItem);
        list.appendChild(listItem);
    });


    for (i in listItems) {
        storeItems.push(i);
    }

    localStorage.setItem('data_for_list', JSON.stringify(storeItems));
}


function loadList() {
    fromStore();

    [...storeItems]
    .map(a => ({ value: a, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(a => a.value)
    .forEach((item, index) => {
        const listItem = document.createElement('li');
        listItem.draggable = true;
        listItem.setAttribute('id', index);
        listItem.innerHTML = `<span class="number">${index + 1}</span><div class="item" draggable="true">${item}</div>`;
        listItems.push(listItem);
        list.appendChild(listItem);
    });

    [...storeItems]
    .map(a => ({ value: a, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(a => a.value)
    .forEach((item, index) => {
        const listItem = document.createElement('li');
        listItem.draggable = true;
        listItem.setAttribute('id', index);
        listItem.innerHTML = `<span class="number">${index + 1}</span><div class="item" draggable="true">${item}</div>`;
        listItems.push(listItem);
        list.appendChild(listItem);
    });

}


function toStore() {
    localStorage.setItem('data_for_list', JSON.stringify(storeItems));
}


function fromStore() {
    storeItems = JSON.parse(localStorage.getItem('data_for_list'));
}


function dragStart() {
    dragStartIndex = +this.closest('li').getAttribute('id');
}

function dragEnter() {
    this.classList.add('over');
}

function dragLeave() {
    this.classList.remove('over');
}

function dragOver(e) {
    e.preventDefault();
}

function dragDrop() {
    const dragEndIndex = +this.getAttribute('id');
    swapItems(dragStartIndex, dragEndIndex);

    this.classList.remove('over');
}


function swapItems(fromIndex, toIndex) {
    const itemOne = listItems[fromIndex].querySelector('.item');
    const itemTwo = listItems[toIndex].querySelector('.item');

    listItems[fromIndex].appendChild(itemTwo);
    listItems[toIndex].appendChild(itemOne);

    storeItems = [];
    for (i of listItems) {
        
        storeItems.push(i.children[1].innerText);
    }
    localStorage.setItem('data_for_list', JSON.stringify(storeItems));
}

function checkAnwser() {
    listItems = document.getElementsByClassName("list");
    let i = 0;

    for (item of listItems[0].children){
        itemText = item.getElementsByTagName('div')[0].innerText;
        let index = i;

        if (itemText !== anwserArr[index]) {
            item.classList.add('incorrect');
            answerButton.classList.add('hidden');
            restartButton.classList.remove('hidden');
            localStorage.setItem('answer_form_' + `index_${currentPageIndex}`, JSON.stringify({questionPlace: false}));

        } else {
            item.classList.add('correct');
            item.classList.remove('incorrect');
            answerButton.classList.add('hidden');
            restartButton.classList.remove('hidden');
            localStorage.setItem('answer_form_' + `index_${currentPageIndex}`, JSON.stringify({questionPlace: true}));
        }
        i++;
    }
}

answerButton.onclick = function(){
    checkAnwser();
    answerButton.classList.add('hidden');
    restartButton.classList.remove('hidden');
    document.getElementById('control_button_2').style.display = 'none';
    document.getElementById('control_button_3').style.display = 'inline-block';
}

var el = document.getElementById('list');

var sortable = new Sortable(el, {
    swap: true,
    swapClass: "highlight",
    animation: 150,
});

_______________________

document.getElementById('control_button_3').style.display = 'none';
document.getElementById('control_button_2').style.display = 'inline-block';

answerButton.classList.remove('gray_dis');
answerButton.disabled = false;
restartButton.classList.add('hidden');
restartButton.disabled = false;

var testObj = data[`index_${currentPageIndex}`].test;
var anwserArr4 = testObj.find(item => item.answers).answers;
var imgPathArr = JSON.parse((testObj.find(item => item.image !== undefined).image).replace(/'/g, '"'));

console.log(imgPathArr)

function waitForData() {
    if (window.dataLoaded) {
        var dragPlc = document.createElement('div');
        dragPlc.classList = 'drag_place';
        dragPlc.id = 'drag_place_t3';
        contentDiv.appendChild(dragPlc);

        var row3 = document.createElement('div');
        row3.classList = 'row';
        row3.id = 'row3';
        row3.index = 'row2';
        var collumnInner = document.createElement('div');
        collumnInner.classList = 'drag4-inner';
        collumnInner.id = 'drag4-inner';

        dragPlc.appendChild(collumnInner)
        dragPlc.appendChild(row3)


        let rowList2 = []
        let fieldsList = []
        let fullList2 = []

        let dragElem3;
        let startIndx2;
        let endIndx2;

        createRow2()
        createColumnElement()

        addEventListeners4()

        function createRow2() {
            [...anwserArr4]
            .map(a => ({ value: a, sort: Math.random() }))
            .sort((a, b) => a.sort - b.sort)
            .map(a => a.value)
            .forEach((item, index) => {
                var rowItem = document.createElement('li')

                rowItem.setAttribute('id', index)
                rowItem.classList.add('item4')
                rowItem.draggable = 'true'
                rowItem.innerText = item

                rowList2.push(rowItem)
                row3.appendChild(rowItem)
            })
        }

        function createColumnElement() {
            imgPathArr.forEach((item, index) => {
                var field = document.createElement('div')

                field.classList.add('field-col')
                field.innerHTML = `
                <img class="img-col" src="${item}" alt="img">
                <div class="field" id="${index}"></div>
                `
                fullList2.push(field)
                collumnInner.appendChild(field)

                let zoomButton = document.createElement('button');
                zoomButton.classList.add('zoom_button');
                zoomButton.id = 'zoom_button_' + `${index}`;
                zoomButton.innerHTML = '<img class="img-zoom" src="./content/zoom_up.svg">';
                field.appendChild(zoomButton);
            })
        }

        function dragStart3() {
            dragElem3 = this;
            if (this.parentNode.getAttribute('index') === 'row2') {
                startIndx2 = this.parentNode.getAttribute('index')
            } else {
                startIndx2 = +this.closest('.field').getAttribute('index')
            }
        }

        function dragEnd3() {
            dragElem3 = null
        }

        function dragEnter3() {
            this.classList.add('over');
        }

        function dragLeave3() {
            this.classList.remove('over');
        }

        function dragOver3(e) {
            e.preventDefault();
        }

        function dragDrop3() {
            if (this.getAttribute('index') === 'row2') {
                endIndx2 = this.getAttribute('index');
            } else {
                endIndx2 = +this.getAttribute('index');
            }
            
            var indexDragElem = +dragElem3.getAttribute('id')

            if (startIndx2 === 'row2' && this.childNodes.length === 0) {
                this.append(dragElem3)
                dragElem3.classList.add('none-border')
            } else if (startIndx2 !== undefined && this.childNodes.length === 0) {
                this.append(dragElem3)
            } else if (startIndx2 === 'row2' && this.childNodes.length !== 0) {
                swap2(endIndx2, indexDragElem)
            } else if (startIndx2 !== undefined && endIndx2 === 'row2') {
                this.append(dragElem3)
                dragElem3.classList.remove('none-border')
            } else if (startIndx2 !== undefined && endIndx2 !== undefined && endIndx2 !== 'row2') {
                swapItems3(startIndx2, endIndx2);
            }
            this.classList.remove('over');
        }

        function swap2(end, start) {
            var itemOne = rowList2[start]
            var itemTwo = fullList2[end].querySelector('.item4')

            itemOne.classList.add('none-border')
            itemTwo.classList.remove('none-border')

            rowList2[start].replaceWith(itemTwo)
            fullList2[end].children[1].append(itemOne)
        }

        function swapItems3(fromIndex, toIndex) {
            var itemOne = fullList2[fromIndex].querySelector('.item4');
            var itemTwo = fullList2[toIndex].querySelector('.item4');

            fullList2[fromIndex].children[1].appendChild(itemTwo);
            fullList2[toIndex].children[1].appendChild(itemOne);
        }

        function checkAnwser4() {
            fullList2.forEach((item, index) => {
                if (item.children[1].querySelector('.item4')?.innerText.trim() === undefined) {
                    item.children[1].classList.add('incorrect')
                    localStorage.setItem('answer_form_index_' + `${currentPageIndex}`, JSON.stringify({questionPlace: false}));
                } else {
                    var itemName = item.children[1].querySelector('.item4').innerText.trim();

                    if (itemName !== anwserArr4[index]) {
                        item.children[1].classList.add('incorrect')
                        localStorage.setItem('answer_form_index_' + `${currentPageIndex}`, JSON.stringify({questionPlace: false}));
                    } else {
                        item.children[1].classList.remove('incorrect')
                        item.children[1].classList.add('correct')
                    }
                }
            });
        }



        function addEventListeners4() {
            var itemElem = document.querySelectorAll('.item4');
            var fieldsElem = document.querySelectorAll('.field');
            var rowElem = document.querySelectorAll('.row')

            itemElem.forEach((item) => {
                item.draggable = true;
            });
            fieldsElem.forEach((elem) => {

            });
            rowElem.forEach((elem) => {

            })
        }
/* Такж же этот скрипт нужно передлать согласно этим переменным
var testObj = data[`index_${currentPageIndex}`].test;
var anwserArr4 = testObj.find(item => item.answers).answers;
var imgPathArr = JSON.parse((testObj.find(item => item.image !== undefined).image).replace(/'/g, '"'));
Поскольку 
        var dropZone1 = document.getElementById('0')
        var dropZone2 = document.getElementById('1')
        var dropZone3 = document.getElementById('2')
        // var dropZone4 = document.getElementById('3')

        var arr = [dropZone1,dropZone2,dropZone3]
может менятся в зависимости от количества объектов
*/

        var row = document.getElementById('row3');
        var dropZone1 = document.getElementById('0')
        var dropZone2 = document.getElementById('1')
        var dropZone3 = document.getElementById('2')
        // var dropZone4 = document.getElementById('3')

        var arr = [dropZone1,dropZone2,dropZone3]

        new Sortable(row, {
                    
                    group: {
                        name: 'shared',
                        put: false // Do not allow items to be put into this list
                    },
                    
                    animation: 150,
                    onEnd: function(e) {

                        if (e.to.className != "row" ) 
                            e.item.style = "background-color: #f0f9ff00; color: black; border: none; box-shadow: none";
                        
                    }
                });



        for (i of arr){
            new Sortable(i, {

                    group: 'shared',
                    animation: 150,
                    onAdd: function(e){
                        var itemEl = e.item;
                        var targetList = e.to;
                        if (targetList.children.length > 1) {

                            var existingItem;
                            if (targetList.children[0] === itemEl) {
                                existingItem = targetList.children[1];
                            } else {
                                existingItem = targetList.children[0];
                            }
                            
                            var sourceList = e.from;
                            sourceList.appendChild(existingItem);
                            targetList.appendChild(itemEl);

                            if (targetList.className != "field") itemEl.style = "";
                            if (sourceList.className == "row") existingItem.style = "";
                            
                        }
                    },
                    onEnd: function(e) {
                        if (e.to.className == "row") e.item.style = "";
                    }

                });
        }

                // Логика, которая зависит от данных
                answerButton.onclick = function(){
                    checkAnwser4();
                    answerButton.classList.add('hidden');
                    restartButton.classList.remove('hidden');
                    document.getElementById('control_button_2').style.display = 'none';
                    document.getElementById('control_button_3').style.display = 'inline-block';
                }

                function  checkAnwser3(){
                    console.log("Ты нажал кнопку");
                }

        console.log("Данные загружены, продолжаем выполнение скрипта.");
    } else {
        // Если данные ещё не загружены, ждем и проверяем снова
        setTimeout(waitForData, 50);
    }
}

waitForData();

